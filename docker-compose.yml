version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl/server.crt:/etc/ssl/certs/nginx.crt
      - ./nginx/ssl/server.key:/etc/ssl/private/nginx.key
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app-network
      - frontend-network

  nextjs:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextjs_container
    networks:
      - frontend-network

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: app_container
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=goapp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/helloworld"]  # Adjust the path as necessary
      interval: 5s
      timeout: 3s
      retries: 5

  db:
    image: postgres:13
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: goapp
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s 
      retries: 5

networks:
  app-network:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  db_data:
